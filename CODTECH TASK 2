/*THIS IS MY SECOND TASK FROM CODTECH IT SOLUTION. MY PROJECT IS ON TO DO LIST */


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advanced To-Do List</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 20px;
        }

        .container {
            max-width: 600px;
            margin: auto;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        h1 {
            text-align: center;
        }

        input[type="text"], input[type="date"] {
            width: calc(100% - 50px);
            padding: 10px;
            margin-right: 10px;
        }

        button {
            padding: 10px;
        }

        ul {
            list-style-type: none;
            padding: 0;
        }

        li {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            border-bottom: 1px solid #ddd;
        }

        .completed {
            text-decoration: line-through;
            color: grey;
        }

        .edit {
            background-color: #ffcc00;
            border: none;
            padding: 5px 10px;
            margin-right: 5px;
            cursor: pointer;
        }

        .remove {
            background-color: #ff4c4c;
            border: none;
            padding: 5px 10px;
            cursor: pointer;
            color: white;
        }

        .filter {
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Advanced To-Do List</h1>
        <input type="text" id="taskInput" placeholder="Add a new task...">
        <input type="date" id="dueDateInput">
        <button id="addTaskBtn">Add Task</button>
        <select id="filterTasks" class="filter">
            <option value="all">All Tasks</option>
            <option value="completed">Completed Tasks</option>
            <option value="pending">Pending Tasks</option>
        </select>
        <ul id="taskList"></ul>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', loadTasks);
        document.getElementById('addTaskBtn').addEventListener('click', addTask);
        document.getElementById('filterTasks').addEventListener('change', filterTasks);

        function addTask() {
            const taskInput = document.getElementById('taskInput');
            const dueDateInput = document.getElementById('dueDateInput');
            const taskText = taskInput.value.trim();
            const dueDate = dueDateInput.value;

            if (taskText) {
                const taskList = document.getElementById('taskList');
                const li = document.createElement('li');

                li.innerHTML = `
                    <span class="task-text">${taskText}</span>
                    <span class="due-date">${dueDate || 'No due date'}</span>
                    <button class="edit">Edit</button>
                    <button class="remove">Remove</button>
                `;

                li.querySelector('.remove').addEventListener('click', () => {
                    taskList.removeChild(li);
                    saveTasks();
                });

                li.querySelector('.edit').addEventListener('click', () => {
                    editTask(li);
                });

                li.querySelector('.task-text').addEventListener('click', () => {
                    li.querySelector('.task-text').classList.toggle('completed');
                    saveTasks();
                });

                taskList.appendChild(li);
                taskInput.value = '';
                dueDateInput.value = '';
                saveTasks();
            }
        }

        function editTask(li) {
            const taskText = li.querySelector('.task-text');
            const dueDate = li.querySelector('.due-date');

            const newTaskText = prompt("Edit Task:", taskText.textContent);
            const newDueDate = prompt("Edit Due Date (YYYY-MM-DD):", dueDate.textContent !== 'No due date' ? dueDate.textContent : '');

            if (newTaskText !== null && newTaskText.trim() !== '') {
                taskText.textContent = newTaskText.trim();
                dueDate.textContent = newDueDate ? newDueDate : 'No due date';
                saveTasks();
            }
        }

        function saveTasks() {
            const tasks = [];
            document.querySelectorAll('#taskList li').forEach(li => {
                tasks.push({
                    text: li.querySelector('.task-text').textContent,
                    dueDate: li.querySelector('.due-date').textContent,
                    completed: li.querySelector('.task-text').classList.contains('completed')
                });
            });
            localStorage.setItem('tasks', JSON.stringify(tasks));
        }

        function loadTasks() {
            const tasks = JSON.parse(localStorage.getItem('tasks')) || [];
            const taskList = document.getElementById('taskList');

            tasks.forEach(task => {
                const li = document.createElement('li');
                li.innerHTML = `
                    <span class="task-text ${task.completed ? 'completed' : ''}">${task.text}</span>
                    <span class="due-date">${task.dueDate}</span>
                    <button class="edit">Edit</button>
                    <button class="remove">Remove</button>
                `;

                li.querySelector('.remove').addEventListener('click', () => {
                    taskList.removeChild(li);
                    saveTasks();
                });

                li.querySelector('.edit').addEventListener('click', () => {
                    editTask(li);
                });

                li.querySelector('.task-text').addEventListener('click', () => {
                    li.querySelector('.task-text').classList.toggle('completed');
                    saveTasks();
                });

                taskList.appendChild(li);
            });
        }

        function filterTasks() {
            const filter = document.getElementById('filterTasks').value;
            const taskList = document.getElementById('taskList');
            const tasks = taskList.getElementsByTagName('li');

            for (let i = 0; i < tasks.length; i++) {
                const taskText = tasks[i].querySelector('.task-text');
                const isCompleted = taskText.classList.contains('completed');

                switch (filter) {
                    case 'completed':
                        tasks[i].style.display = isCompleted ? 'flex' : 'none';
                        break;
                    case 'pending':
                        tasks[i].style.display = isCompleted ? 'none' : 'flex';
                        break;
                    default:
                        tasks[i].style.display = 'flex';
                }
            }
        }
    </script>
</body>
</html>
